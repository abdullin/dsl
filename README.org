* CQRS DSL Tool

This is a simple Clojure utility which takes aggregate specifications
as input and generates C# files for command and event classes
(serializable with protobuf).

It is a small step-up from [[https://github.com/Lokad/lokad-codedsl][Lokad Code DSL]] which did the same thing but
was based on ANTLR for parsing of the original ~ddd~ files to
AST. This tool uses [[https://github.com/edn-format/edn][edn data notation]] which can be directly used as
AST. We simply prettify this AST a little (e.g. via resolving field
shortcuts) to transform it into [[https://en.wikipedia.org/wiki/Semantic_data_model][Semantic DSL Model]] and then generate
C# code from it.

** Examples

For example, given a file [[/examples/trivial.edn][trivial.edn]], it will generate
[[/examples/trivial.cs][trivial.cs]]. 

Here is the snippet. This portion below:

#+BEGIN_SRC lisp
  (cmd UpdateUserRoles (:user :roles))
#+END_SRC

will translate to this snippet (extra fields are shared between
multiple messages and are declared at a higher level):

#+BEGIN_SRC csharp
  [DataContract(Namespace = "trivial.msg")]
  public partial class UserRolesUpdated : IAccountEvent
  {
      [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
      [DataMember(Order = 2)] public UserId UserId { get; private set; }
      [DataMember(Order = 3)] public string UserName { get; private set; }
      [DataMember(Order = 4)] public string[] Roles { get; private set; }
      [DataMember(Order = 5)] public DateTime DateUtc { get; private set; }
    
      UserRolesUpdated ()
      {
          Roles = new string[0];
      }
    
      public UserRolesUpdated (TenantId tenantId, UserId userId, string userName, string[] roles, DateTime dateUtc)
      {
          if ( tenantId == null ) throw new ArgumentNullException( "tenantId" );
          if ( userId == null ) throw new ArgumentNullException( "userId" );
          if ( userName == null ) throw new ArgumentNullException( "userName" );
          TenantId = tenantId;
          UserId = userId;
          UserName = userName;
          Roles = roles;
          DateUtc = dateUtc;
      }
  }
#+END_SRC

For an annotated example see [[/examples/simple.edn][simple.edn]].

** Building and running

You will need [[http://leiningen.org][lein]] build tool. 

To run examples, regenerating all cs files:

#+BEGIN_SRC shell
  $ lein run examples
#+END_SRC

To create a single jar file: 

#+BEGIN_SRC shell
  $ lein uberjar
#+END_SRC

This will create an =dsl-version-commit.uber.jar= file in the
=targets= folder. This file could then be executed via:

#+BEGIN_SRC shell
  $ java -jar target/dsl-0.1.0-a8a191a.uber.jar examples
#+END_SRC

Or you could copy it to any machine with Java and run there.
