using Abstractions;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Local
namespace SkuVault.Sample
{
    #region Generated by Lokad Code DSL
    [DataContract(Namespace = "SkuVault.Sample-ns")]
    public partial class EventStreamStarted : IFuncEvent
    {
        [DataMember(Order = 1)] public DateTime DateUtc { get; private set; }
        
        EventStreamStarted () {}
        public EventStreamStarted (DateTime dateUtc)
        {
            DateUtc = dateUtc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Started on {0}", DateUtc);
        }
    }
    [DataContract(Namespace = "SkuVault.Sample-ns")]
    public partial class FindAssembly : IFuncCommand
    {
    }
    [DataContract(Namespace = "SkuVault.Sample-ns")]
    public partial class CommandUsingReferences : ICommand<SaleId>
    {
        [DataMember(Order = 1)] public RefInfo RefInfo { get; private set; }
        [DataMember(Order = 2)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 3)] public DateTime DateUtc { get; private set; }
        
        CommandUsingReferences () {}
        public CommandUsingReferences (RefInfo refInfo, TenantId tenantId, DateTime dateUtc)
        {
            RefInfo = refInfo;
            TenantId = tenantId;
            DateUtc = dateUtc;
        }
    }
    [DataContract(Namespace = "SkuVault.Sample-ns")]
    public partial class CommandWithArrayAndNullable : ICommand<SaleId>
    {
        [DataMember(Order = 1)] public RefInfo RefInfo { get; private set; }
        [DataMember(Order = 2)] public int? MaybeInt { get; private set; }
        [DataMember(Order = 3)] public string[] Array { get; private set; }
        
        CommandWithArrayAndNullable () 
{
            Array = new string[0];
        }
        public CommandWithArrayAndNullable (RefInfo refInfo, int? maybeInt, string[] array)
        {
            RefInfo = refInfo;
            MaybeInt = maybeInt;
            Array = array;
        }
    }
    [DataContract(Namespace = "SkuVault.Sample-ns")]
    public partial class EventWithSkippedOrders : IEvent<SaleId>
    {
        [DataMember(Order = 1)] public RefInfo RefInfo { get; private set; }
        [DataMember(Order = 2)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 5)] public string Title { get; private set; }
        
        EventWithSkippedOrders () {}
        public EventWithSkippedOrders (RefInfo refInfo, TenantId tenantId, string title)
        {
            RefInfo = refInfo;
            TenantId = tenantId;
            Title = title;
        }
    }
    
    public interface ISalesApplicationService
    {
        void When(CommandUsingReferences c);
        void When(CommandWithArrayAndNullable c);
    }
    
    public interface ISalesState
    {
        void When(EventWithSkippedOrders e);
    }
    #endregion
}
