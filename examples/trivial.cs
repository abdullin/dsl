// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Local
namespace Trivial
{
    #region Generated by Lokad Code DSL
    [DataContract(Namespace = "trivial.msg")]
    public partial class AddUser : IAccountCommand
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public string UserName { get; private set; }
        [DataMember(Order = 3)] public string[] Roles { get; private set; }
        
        AddUser ()
        {
            Roles = new string[0];
        }
        
        public AddUser (TenantId tenantId, string userName, string[] roles)
        {
            if ( tenantId == null ) throw new ArgumentNullException( "tenantId" );
            if ( userName == null ) throw new ArgumentNullException( "userName" );
            TenantId = tenantId;
            UserName = userName;
            Roles = roles;
        }
    }
    [DataContract(Namespace = "trivial.msg")]
    public partial class UserAdded : IAccountEvent
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public string UserName { get; private set; }
        [DataMember(Order = 4)] public string[] Roles { get; private set; }
        [DataMember(Order = 5)] public DateTime DateUtc { get; private set; }
        
        UserAdded ()
        {
            Roles = new string[0];
        }
        
        public UserAdded (TenantId tenantId, UserId userId, string userName, string[] roles, DateTime dateUtc)
        {
            if ( tenantId == null ) throw new ArgumentNullException( "tenantId" );
            if ( userId == null ) throw new ArgumentNullException( "userId" );
            if ( userName == null ) throw new ArgumentNullException( "userName" );
            TenantId = tenantId;
            UserId = userId;
            UserName = userName;
            Roles = roles;
            DateUtc = dateUtc;
        }
    }
    [DataContract(Namespace = "trivial.msg")]
    public partial class UpdateUserRoles : IAccountCommand
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public string[] Roles { get; private set; }
        
        UpdateUserRoles ()
        {
            Roles = new string[0];
        }
        
        public UpdateUserRoles (TenantId tenantId, UserId userId, string[] roles)
        {
            if ( tenantId == null ) throw new ArgumentNullException( "tenantId" );
            if ( userId == null ) throw new ArgumentNullException( "userId" );
            TenantId = tenantId;
            UserId = userId;
            Roles = roles;
        }
    }
    [DataContract(Namespace = "trivial.msg")]
    public partial class UserRolesUpdated : IAccountEvent
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public string UserName { get; private set; }
        [DataMember(Order = 4)] public string[] Roles { get; private set; }
        [DataMember(Order = 5)] public DateTime DateUtc { get; private set; }
        
        UserRolesUpdated ()
        {
            Roles = new string[0];
        }
        
        public UserRolesUpdated (TenantId tenantId, UserId userId, string userName, string[] roles, DateTime dateUtc)
        {
            if ( tenantId == null ) throw new ArgumentNullException( "tenantId" );
            if ( userId == null ) throw new ArgumentNullException( "userId" );
            if ( userName == null ) throw new ArgumentNullException( "userName" );
            TenantId = tenantId;
            UserId = userId;
            UserName = userName;
            Roles = roles;
            DateUtc = dateUtc;
        }
    }
    [DataContract(Namespace = "trivial.msg")]
    public partial class DeleteUser : IAccountCommand
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        
        DeleteUser () {}
        
        public DeleteUser (TenantId tenantId, UserId userId)
        {
            if ( tenantId == null ) throw new ArgumentNullException( "tenantId" );
            if ( userId == null ) throw new ArgumentNullException( "userId" );
            TenantId = tenantId;
            UserId = userId;
        }
    }
    [DataContract(Namespace = "trivial.msg")]
    public partial class UserDeleted : IAccountEvent
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public string UserName { get; private set; }
        [DataMember(Order = 4)] public string[] Roles { get; private set; }
        [DataMember(Order = 5)] public DateTime DateUtc { get; private set; }
        
        UserDeleted ()
        {
            Roles = new string[0];
        }
        
        public UserDeleted (TenantId tenantId, UserId userId, string userName, string[] roles, DateTime dateUtc)
        {
            if ( tenantId == null ) throw new ArgumentNullException( "tenantId" );
            if ( userId == null ) throw new ArgumentNullException( "userId" );
            if ( userName == null ) throw new ArgumentNullException( "userName" );
            TenantId = tenantId;
            UserId = userId;
            UserName = userName;
            Roles = roles;
            DateUtc = dateUtc;
        }
    }
    
    public interface IAccountApplicationService
    {
        void When(AddUser c);
        void When(UpdateUserRoles c);
        void When(DeleteUser c);
    }
    
    public interface IAccountState
    {
        void When(UserAdded e);
        void When(UserRolesUpdated e);
        void When(UserDeleted e);
    }
    #endregion
}
