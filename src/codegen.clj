(ns codegen
  (:require [clojure.string :as str]))

(defn indent [& seq]
  (->> seq
       flatten
       (filter some?)
       (reduce
        (fn [agg next]
          (if (or (empty? agg) (= :nl (last agg)))
            (conj agg :indent next)
            (conj agg next)))
        [])))

(defn gen-property
  [m]
  (let [{:keys [order prop type]} m]
    ["[DataMember(Order = " order ")] public " type " " prop " { get; private set; }" :nl]))

(defn gen-assignment [m] [(:prop m) " = " (:name m) ";" :nl])
(defn gen-assert
  [f]
  (let [{:keys [schema name]} f]
    (case schema
      'NotNull ["if ( " name " == null ) throw new ArgumentNullException( \"" name "\" );" :nl]
      nil)))

(defn gen-arg [m] [(:type m) " " (:name m)])
(defn gen-array-init [m] [(:prop m) " = new " (:array-of m) "[0];" :nl])

(defn gen-private-ctor
  [name fields]
  (let [arrays (filter #(:array-of %) fields)]
    (if (seq arrays)
      [name " ()" :nl "{" :nl (indent (map gen-array-init arrays)) "}" :nl]
      [name " () {}" :nl])))

(defn gen-public-ctor
  [name fields]
  ["public " name " (" (interpose ", " (map gen-arg fields)  ) ")" :nl
   "{" :nl
   (indent
    (map gen-assert fields)
    (map gen-assignment fields))
   "}" :nl
   ])

(defn gen-to-string
  [txt names]
  ["public override string ToString()" :nl
   "{" :nl
   (indent ["return string.Format(@\"" txt "\", " (str/join ", " names) ");" :nl])
   "}" :nl])

(defn gen-contract
  [model]
  (let [{:keys [name base fields string extern]} model]
    [
     "[DataContract(Namespace = \"" extern "\")]" :nl
     "public partial class " name " : " base :nl "{" :nl
     (if (seq fields)
       (indent
        (map gen-property fields) :nl
        (gen-private-ctor name fields) :nl
        (gen-public-ctor name fields)
        (if string [:nl (apply gen-to-string string)]))
       )
     "}" :nl
     ]
    ))

(defn gen-agg [agg] (map gen-contract (:messages agg)))

(defn gen-service-call [msg kind char]
  (if (= kind (:kind msg))
    ["void When(" (:name msg) " " char ");" :nl]))

(defn gen-service
  [agg]
  (let [{:keys [name messages]} agg]
    (when (some? name)
      [
       :nl "public interface I" name "ApplicationService" :nl "{" :nl
       (indent
        (map #(gen-service-call % 'cmd "c") messages))
       "}" :nl :nl
       :nl "public interface I" name "State" :nl "{" :nl
       (indent
        (map #(gen-service-call % 'evt "e") messages))
       "}" :nl
       ])))

(defn model->code
  "Generates C# code tree given the model"
  [model]
  (let [{:keys [using namespace aggs]} model]
    (concat
     (map #(list "using " % ";" :nl) using)
     [
      "// ReSharper disable PartialTypeWithSinglePart" :nl
      "// ReSharper disable UnusedMember.Local" :nl
      "namespace " namespace :nl "{" :nl
      (indent
       "#region Generated by Lokad Code DSL" :nl
       (map gen-agg aggs)
       (map gen-service aggs)
       "#endregion" :nl)
      "}" :nl])))
